{"name":"Caphe","tagline":"Various design utils for CoffeeScript","body":"Caphe\r\n=====\r\n\r\nVarious design utils for [htpp://coffeescript.org](CoffeeScript). Implementation of Reg Braithwaite's [article](http://raganwald.com/2014/04/10/mixins-forwarding-delegation.html).\r\n\r\n## Features\r\n\r\n**mixin** consumer, modules...\r\n\r\nMix modules' methods to the model.\r\n```\r\nclass Person\r\n\r\nperson = new Person()\r\n\r\nTalkable =\r\n  speak: ->\r\n    console.log \"Yeah!\"\r\n\r\nMoveable =\r\n  walk: (speed) ->\r\n    console.log \"Walk by #{speed}\"\r\n  run: (speed) ->\r\n    console.log \"Run by #{speed}\"\r\n\r\nCaphe.mixin(person, Talkable, Moveable)\r\n\r\nperson.speak() # \"Yeah!\"\r\nperson.walk(8) # \"Walk by 8\"\r\nperson.run(5)  # \"Run by 5\"\r\n```\r\n----------\r\n\r\n**include** names...\r\n\r\nLike mixin but do it Ruby style.\r\n```\r\n# Refer to previous example\r\nclass Person extends Caphe\r\n  @include Talkable, Moveable\r\n\r\nperson = new Person()\r\n\r\n# `person` has speak(), run(), walk() functions now\r\n```\r\n----------\r\n\r\n**attrAccessor** names...\r\n\r\nCreate getter & setter methods in Ruby style and hide the properties from public access.\r\n```\r\nclass Person extends Caphe\r\n  @attrReader \"name\", \"age\"\r\n\r\n  constructor: (@job) ->\r\n\r\nperson = new Person(\"Bar\")\r\nperson.setName(\"Foo\")\r\nperson.getName()        # Foo\r\nperson.name             # undefined\r\nperson.getAge()         # undefined\r\nperson.setAge(5)\r\nperson.getAge()         # 5\r\nperson.age              # undefined\r\nperson.job              # Bar\r\n```\r\n----------\r\n\r\n**CONST** {name:value, ...}\r\n\r\nCreate constant getters in prototype level.\r\n```\r\nclass Person extends Caphe\r\n  @CONST EYE: 2, SPECIES: 'homo sapiens'\r\n\r\nPerson::EYE()      # 2\r\nPerson::SPECIES()  # homo sapiens\r\n```\r\n----------\r\n\r\n**forward** consumer, providers...\r\n\r\nMixin with late bound. The forwarded methods have each own module as their context.\r\n```\r\nmodule.foo = -> console.log \"a\"\r\nmodule.bar = -> console.log @name\r\nCaphe.forward(person, module)\r\nperson.foo()  # a\r\nperson.bar()  # undefined\r\n\r\nmodule.bar = -> console.log \"b\"\r\nperson.bar()  # b\r\n```\r\n----------\r\n\r\n**delegate** consumer, providers...\r\n\r\nLike `#forward`, but the forwarded methods have the consumer as their context.\r\n```\r\nperson.name = \"John\"\r\nmodule.foo = -> console.log \"a\"\r\nmodule.bar = -> console.log @name\r\nCaphe.forward(person, module)\r\nperson.foo()  # a\r\nperson.bar()  # John\r\n\r\nmodule.foo = -> console.log \"b\"\r\nperson.foo()  # b\r\n```\r\n----------\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}